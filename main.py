import asyncio
import logging
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
from sqlalchemy import Column, Integer, String, ForeignKey, DateTime, select, desc
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import declarative_base, sessionmaker

from config import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ---
class SendMessageState(StatesGroup):
    waiting_for_text = State()
class RegisterPhone(StatesGroup):
    waiting_for_phone = State()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = "sqlite+aiosqlite:///users.db"
engine = create_async_engine(DATABASE_URL, echo=False)
Base = declarative_base()
AsyncSessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

# --- –ú–æ–¥–µ–ª–∏ ---
class User(Base):
    __tablename__ = 'user'
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, unique=True, nullable=False)
    name = Column(String(50), nullable=False)
    phone = Column(String(20), nullable=True)

    def __repr__(self):
        return f"<User {self.user_id}: {self.name}>"

class Info(Base):
    __tablename__ = 'info'
    id = Column(Integer, primary_key=True)
    text = Column(String, nullable=False)
    date = Column(DateTime, default=datetime.utcnow)
    user_id = Column(Integer, ForeignKey("user.user_id"), nullable=False)

    def __repr__(self):
        return f"<Info {self.user_id}: {self.text}>"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü ---
async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

async def get_user_by_id(user_id: int) -> User | None:
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.user_id == user_id))
        user = result.scalar_one_or_none()
        return user

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–Ø –±–æ—Ç-—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=inline_1)


@dp.callback_query(F.data == "entry")
async def entry(callback: CallbackQuery):
    await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
    user = await get_user_by_id(callback.from_user.id)
    if user:
        await callback.message.edit_text(f"–ü—Ä–∏–≤–µ—Ç! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {user.name}", reply_markup=inline_3)
        await callback.answer()
    else:
        await callback.message.edit_text(f'–ü—Ä–∏–≤–µ—Ç, {callback.from_user.full_name}. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è?', reply_markup=inline_2)
        await callback.answer()

@dp.callback_query(F.data == "delete")
async def delete_user(callback: CallbackQuery):
    async with AsyncSessionLocal() as session:
        user = await get_user_by_id(callback.from_user.id)
        if user:
            await session.delete(user)
            await session.commit()
            await callback.message.edit_text("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /start")
        else:
            await callback.message.edit_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    await callback.answer()

@dp.callback_query(F.data == "exit")
async def exit(callback: CallbackQuery):
    await callback.message.edit_text(f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è , {callback.from_user.full_name}!")
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ" ---
@dp.callback_query(F.data == "send")
async def ask_for_message(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await state.set_state(SendMessageState.waiting_for_text)
    await callback.answer()

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î ---
@dp.message(SendMessageState.waiting_for_text)
async def save_user_text(message: Message, state: FSMContext):
    user = await get_user_by_id(message.from_user.id)
    if not user:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    async with AsyncSessionLocal() as session:
        new_info = Info(user_id=user.user_id, text=message.text)
        session.add(new_info)
        await session.commit()

    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", reply_markup=inline_3)
    await state.clear()

@dp.callback_query(F.data == "registration")
async def registration(callback: CallbackQuery):
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=choose_phone_kb)
    await callback.answer()

@dp.message(F.contact)
async def save_phone(message: Message):
    phone = message.contact.phone_number
    name = message.from_user.full_name
    async with AsyncSessionLocal() as session:
        new_user = User(user_id=message.from_user.id, name=name, phone=phone)
        session.add(new_user)
        await session.commit()
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {name}! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}", reply_markup=ReplyKeyboardRemove())
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:", reply_markup=inline_3)

@dp.message(F.text.endswith("–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é"))
async def ask_phone_manually(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 89XXXXXXXXX:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegisterPhone.waiting_for_phone)

@dp.message(RegisterPhone.waiting_for_phone)
async def process_phone_input(message: Message, state: FSMContext):
    phone = message.text.strip()
    phone = normalize_phone_number(phone)
    if not phone:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    name = message.from_user.full_name
    async with AsyncSessionLocal() as session:
        new_user = User(user_id=message.from_user.id, name=name, phone=phone)
        session.add(new_user)
        await session.commit()

    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {name}! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:", reply_markup=inline_3)
    await state.clear()

@dp.message(Command("users"))
async def get_all_users(message: Message):
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User))
        users = result.scalars().all()

    if not users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for u in users:
            text += f"üÜî {u.user_id}\nüë§ {u.name}\nüìû {u.phone or '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}\n\n"
        await message.answer(text)

@dp.message(Command("info"))
async def show_info(message: Message):
    user = await get_user_by_id(message.from_user.id)
    if user:
        await message.answer(f"üßæ –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n–ò–º—è: {user.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}")
    else:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

@dp.message(Command("links"))
async def links(message: Message):
    await message.answer("–ú–µ–¥–∏–∞:", reply_markup=inline_4)


@dp.message(Command("messages"))
async def show_user_messages(message: Message):
    user = await get_user_by_id(message.from_user.id)
    if not user:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Info).where(Info.user_id == user.user_id).order_by(desc(Info.date)).limit(10)
        )
        messages = result.scalars().all()

    if not messages:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return

    response = "–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
    for msg in messages:
        response += f"üïí {msg.date.strftime('%d.%m %H:%M')}\nüí¨ {msg.text}\n\n"

    await message.answer(response)

from aiogram.types import Message
from sqlalchemy import select, join
from sqlalchemy.orm import aliased

@dp.message(Command("all_messages"))
async def show_all_messages(message: Message):
    # # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ user_id, –Ω–∞–ø—Ä–∏–º–µ—Ä)
    # if message.from_user.id != ADMIN_ID:
    #     await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    #     return

    async with AsyncSessionLocal() as session:
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã User –∏ Info –ø–æ user_id
        j = join(User, Info, User.user_id == Info.user_id)
        result = await session.execute(
            select(User.user_id, User.name, Info.text, Info.date).select_from(j).order_by(Info.date.desc())
        )
        records = result.all()

    if not records:
        await message.answer("üóÉ –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    response = "üìë –í—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
    for user_id, name, text, date in records:
        response += (
            f"üë§ {name} (ID: {user_id})\n"
            f"üïí {date.strftime('%d.%m %H:%M')}\n"
            f"üí¨ {text}\n\n"
        )

    # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è
    if len(response) > 4000:
        await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–π —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ. –í—ã–≤–æ–∂—É —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ.")
        await message.answer(response[:4000])
    else:
        await message.answer(response)


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω!")
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
